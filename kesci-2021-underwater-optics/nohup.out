/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
2021-07-29 16:08:55,081 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) [GCC 9.3.0]
CUDA available: True
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.105
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1
OpenCV: 4.5.3
MMCV: 1.1.1
MMDetection: 2.4.0+8c552ca
MMDetection Compiler: GCC 7.3
MMDetection CUDA Compiler: 10.1
------------------------------------------------------------

INFO:mmdet:Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) [GCC 9.3.0]
CUDA available: True
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.105
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1
OpenCV: 4.5.3
MMCV: 1.1.1
MMDetection: 2.4.0+8c552ca
MMDetection Compiler: GCC 7.3
MMDetection CUDA Compiler: 10.1
------------------------------------------------------------

2021-07-29 16:08:55,584 - mmdet - INFO - Distributed training: True
INFO:mmdet:Distributed training: True
2021-07-29 16:08:56,280 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    pretrained=None,
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=101,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            pretrained=None,
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[4],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        reg_decoded_bbox=True,
        loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                reg_decoded_bbox=True,
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0))
        ]))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=2000,
        max_num=2000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=[
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False),
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.6,
                neg_iou_thr=0.6,
                min_pos_iou=0.6,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False),
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.7,
                min_pos_iou=0.7,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)
    ])
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.0001,
        nms=dict(type='soft_nms', iou_threshold=0.5, min_score=0.0001),
        max_per_img=300))
dataset_type = 'UnderwaterOpticsDataset'
data_root = 'data/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=[(1000, 804), (1000, 352)],
        multiscale_mode='range',
        keep_ratio=True),
    dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
    dict(type='MotionBlur', p=0.3),
    dict(type='AutoAugment', autoaug_type='v1'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=[(2000, 704), (2000, 960), (2000, 1216)],
        flip=True,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=2,
    train=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/train_filter_old_scallop.json',
        img_prefix='data/train/image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1000, 804), (1000, 352)],
                multiscale_mode='range',
                keep_ratio=True),
            dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
            dict(type='MotionBlur', p=0.3),
            dict(type='AutoAugment', autoaug_type='v1'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        filter_empty_gt=True),
    val=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/train_filter_old_scallop.json',
        img_prefix='data/train/image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1000, 804), (1000, 352)],
                multiscale_mode='range',
                keep_ratio=True),
            dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
            dict(type='MotionBlur', p=0.3),
            dict(type='AutoAugment', autoaug_type='v1'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    test=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/testB.json',
        img_prefix='data/test-B-image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=[(2000, 704), (2000, 960), (2000, 1216)],
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[16, 19])
total_epochs = 20
checkpoint_config = dict(interval=1)
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'data/pretrained/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/optics'
gpu_ids = range(0, 1)

INFO:mmdet:Config:
model = dict(
    type='CascadeRCNN',
    pretrained=None,
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=101,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            pretrained=None,
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[4],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        reg_decoded_bbox=True,
        loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                reg_decoded_bbox=True,
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=4,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0,
                    smoothing=0.001),
                loss_bbox=dict(type='GIoULoss', loss_weight=5.0))
        ]))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=2000,
        max_num=2000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=[
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False),
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.6,
                neg_iou_thr=0.6,
                min_pos_iou=0.6,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False),
        dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.7,
                min_pos_iou=0.7,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)
    ])
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.0001,
        nms=dict(type='soft_nms', iou_threshold=0.5, min_score=0.0001),
        max_per_img=300))
dataset_type = 'UnderwaterOpticsDataset'
data_root = 'data/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=[(1000, 804), (1000, 352)],
        multiscale_mode='range',
        keep_ratio=True),
    dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
    dict(type='MotionBlur', p=0.3),
    dict(type='AutoAugment', autoaug_type='v1'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=[(2000, 704), (2000, 960), (2000, 1216)],
        flip=True,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=2,
    train=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/train_filter_old_scallop.json',
        img_prefix='data/train/image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1000, 804), (1000, 352)],
                multiscale_mode='range',
                keep_ratio=True),
            dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
            dict(type='MotionBlur', p=0.3),
            dict(type='AutoAugment', autoaug_type='v1'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        filter_empty_gt=True),
    val=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/train_filter_old_scallop.json',
        img_prefix='data/train/image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1000, 804), (1000, 352)],
                multiscale_mode='range',
                keep_ratio=True),
            dict(type='RandomFlip', direction=['horizontal'], flip_ratio=0.5),
            dict(type='MotionBlur', p=0.3),
            dict(type='AutoAugment', autoaug_type='v1'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    test=dict(
        type='UnderwaterOpticsDataset',
        ann_file='data/annotations/testB.json',
        img_prefix='data/test-B-image/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=[(2000, 704), (2000, 960), (2000, 1216)],
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[16, 19])
total_epochs = 20
checkpoint_config = dict(interval=1)
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'data/pretrained/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/optics'
gpu_ids = range(0, 1)

loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=0.40s)
creating index...
index created!
Done (t=0.42s)
creating index...
index created!
Done (t=0.44s)
creating index...
Done (t=0.43s)
creating index...
Done (t=0.42s)
creating index...
index created!
index created!
index created!
Done (t=0.43s)
creating index...
index created!
Done (t=0.42s)
creating index...
index created!
Done (t=0.46s)
creating index...
index created!
2021-07-29 16:09:06,352 - mmdet - INFO - load checkpoint from data/pretrained/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth
INFO:mmdet:load checkpoint from data/pretrained/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth
2021-07-29 16:09:07,564 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
unexpected key in source state_dict: roi_head.mask_head.0.convs.0.conv.weight, roi_head.mask_head.0.convs.0.conv.bias, roi_head.mask_head.0.convs.1.conv.weight, roi_head.mask_head.0.convs.1.conv.bias, roi_head.mask_head.0.convs.2.conv.weight, roi_head.mask_head.0.convs.2.conv.bias, roi_head.mask_head.0.convs.3.conv.weight, roi_head.mask_head.0.convs.3.conv.bias, roi_head.mask_head.0.upsample.weight, roi_head.mask_head.0.upsample.bias, roi_head.mask_head.0.conv_logits.weight, roi_head.mask_head.0.conv_logits.bias, roi_head.mask_head.1.convs.0.conv.weight, roi_head.mask_head.1.convs.0.conv.bias, roi_head.mask_head.1.convs.1.conv.weight, roi_head.mask_head.1.convs.1.conv.bias, roi_head.mask_head.1.convs.2.conv.weight, roi_head.mask_head.1.convs.2.conv.bias, roi_head.mask_head.1.convs.3.conv.weight, roi_head.mask_head.1.convs.3.conv.bias, roi_head.mask_head.1.upsample.weight, roi_head.mask_head.1.upsample.bias, roi_head.mask_head.1.conv_logits.weight, roi_head.mask_head.1.conv_logits.bias, roi_head.mask_head.1.conv_res.conv.weight, roi_head.mask_head.1.conv_res.conv.bias, roi_head.mask_head.2.convs.0.conv.weight, roi_head.mask_head.2.convs.0.conv.bias, roi_head.mask_head.2.convs.1.conv.weight, roi_head.mask_head.2.convs.1.conv.bias, roi_head.mask_head.2.convs.2.conv.weight, roi_head.mask_head.2.convs.2.conv.bias, roi_head.mask_head.2.convs.3.conv.weight, roi_head.mask_head.2.convs.3.conv.bias, roi_head.mask_head.2.upsample.weight, roi_head.mask_head.2.upsample.bias, roi_head.mask_head.2.conv_logits.weight, roi_head.mask_head.2.conv_logits.bias, roi_head.mask_head.2.conv_res.conv.weight, roi_head.mask_head.2.conv_res.conv.bias, roi_head.semantic_head.lateral_convs.0.conv.weight, roi_head.semantic_head.lateral_convs.0.conv.bias, roi_head.semantic_head.lateral_convs.1.conv.weight, roi_head.semantic_head.lateral_convs.1.conv.bias, roi_head.semantic_head.lateral_convs.2.conv.weight, roi_head.semantic_head.lateral_convs.2.conv.bias, roi_head.semantic_head.lateral_convs.3.conv.weight, roi_head.semantic_head.lateral_convs.3.conv.bias, roi_head.semantic_head.lateral_convs.4.conv.weight, roi_head.semantic_head.lateral_convs.4.conv.bias, roi_head.semantic_head.convs.0.conv.weight, roi_head.semantic_head.convs.0.conv.bias, roi_head.semantic_head.convs.1.conv.weight, roi_head.semantic_head.convs.1.conv.bias, roi_head.semantic_head.convs.2.conv.weight, roi_head.semantic_head.convs.2.conv.bias, roi_head.semantic_head.convs.3.conv.weight, roi_head.semantic_head.convs.3.conv.bias, roi_head.semantic_head.conv_embedding.conv.weight, roi_head.semantic_head.conv_embedding.conv.bias, roi_head.semantic_head.conv_logits.weight, roi_head.semantic_head.conv_logits.bias

WARNING:mmdet:The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([5]).
unexpected key in source state_dict: roi_head.mask_head.0.convs.0.conv.weight, roi_head.mask_head.0.convs.0.conv.bias, roi_head.mask_head.0.convs.1.conv.weight, roi_head.mask_head.0.convs.1.conv.bias, roi_head.mask_head.0.convs.2.conv.weight, roi_head.mask_head.0.convs.2.conv.bias, roi_head.mask_head.0.convs.3.conv.weight, roi_head.mask_head.0.convs.3.conv.bias, roi_head.mask_head.0.upsample.weight, roi_head.mask_head.0.upsample.bias, roi_head.mask_head.0.conv_logits.weight, roi_head.mask_head.0.conv_logits.bias, roi_head.mask_head.1.convs.0.conv.weight, roi_head.mask_head.1.convs.0.conv.bias, roi_head.mask_head.1.convs.1.conv.weight, roi_head.mask_head.1.convs.1.conv.bias, roi_head.mask_head.1.convs.2.conv.weight, roi_head.mask_head.1.convs.2.conv.bias, roi_head.mask_head.1.convs.3.conv.weight, roi_head.mask_head.1.convs.3.conv.bias, roi_head.mask_head.1.upsample.weight, roi_head.mask_head.1.upsample.bias, roi_head.mask_head.1.conv_logits.weight, roi_head.mask_head.1.conv_logits.bias, roi_head.mask_head.1.conv_res.conv.weight, roi_head.mask_head.1.conv_res.conv.bias, roi_head.mask_head.2.convs.0.conv.weight, roi_head.mask_head.2.convs.0.conv.bias, roi_head.mask_head.2.convs.1.conv.weight, roi_head.mask_head.2.convs.1.conv.bias, roi_head.mask_head.2.convs.2.conv.weight, roi_head.mask_head.2.convs.2.conv.bias, roi_head.mask_head.2.convs.3.conv.weight, roi_head.mask_head.2.convs.3.conv.bias, roi_head.mask_head.2.upsample.weight, roi_head.mask_head.2.upsample.bias, roi_head.mask_head.2.conv_logits.weight, roi_head.mask_head.2.conv_logits.bias, roi_head.mask_head.2.conv_res.conv.weight, roi_head.mask_head.2.conv_res.conv.bias, roi_head.semantic_head.lateral_convs.0.conv.weight, roi_head.semantic_head.lateral_convs.0.conv.bias, roi_head.semantic_head.lateral_convs.1.conv.weight, roi_head.semantic_head.lateral_convs.1.conv.bias, roi_head.semantic_head.lateral_convs.2.conv.weight, roi_head.semantic_head.lateral_convs.2.conv.bias, roi_head.semantic_head.lateral_convs.3.conv.weight, roi_head.semantic_head.lateral_convs.3.conv.bias, roi_head.semantic_head.lateral_convs.4.conv.weight, roi_head.semantic_head.lateral_convs.4.conv.bias, roi_head.semantic_head.convs.0.conv.weight, roi_head.semantic_head.convs.0.conv.bias, roi_head.semantic_head.convs.1.conv.weight, roi_head.semantic_head.convs.1.conv.bias, roi_head.semantic_head.convs.2.conv.weight, roi_head.semantic_head.convs.2.conv.bias, roi_head.semantic_head.convs.3.conv.weight, roi_head.semantic_head.convs.3.conv.bias, roi_head.semantic_head.conv_embedding.conv.weight, roi_head.semantic_head.conv_embedding.conv.bias, roi_head.semantic_head.conv_logits.weight, roi_head.semantic_head.conv_logits.bias

2021-07-29 16:09:07,581 - mmdet - INFO - Start running, host: deeplearn@supermicro-SYS-4028GR-TR, work_dir: /home/deeplearn/waterdetection/kesci-2021-underwater-optics/work_dirs/optics
INFO:mmdet:Start running, host: deeplearn@supermicro-SYS-4028GR-TR, work_dir: /home/deeplearn/waterdetection/kesci-2021-underwater-optics/work_dirs/optics
2021-07-29 16:09:07,581 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
INFO:mmdet:workflow: [('train', 1)], max: 20 epochs
2021-07-29 16:09:37,383 - mmdet - INFO - Epoch [1][20/954]	lr: 3.896e-04, eta: 7:53:05, time: 1.489, data_time: 0.409, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 11.0839, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 13.8331, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 12.0119, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][20/954]	lr: 3.896e-04, eta: 7:53:05, time: 1.489, data_time: 0.409, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 11.0839, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 13.8331, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 12.0119, s2.loss_bbox: nan, loss: nan
2021-07-29 16:09:57,689 - mmdet - INFO - Epoch [1][40/954]	lr: 7.892e-04, eta: 6:37:18, time: 1.015, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 18.5711, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 18.5711, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 18.5711, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][40/954]	lr: 7.892e-04, eta: 6:37:18, time: 1.015, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 18.5711, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 18.5711, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 18.5711, s2.loss_bbox: nan, loss: nan
2021-07-29 16:10:18,024 - mmdet - INFO - Epoch [1][60/954]	lr: 1.189e-03, eta: 6:12:02, time: 1.017, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 21.6872, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 21.6872, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 21.6872, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][60/954]	lr: 1.189e-03, eta: 6:12:02, time: 1.017, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 21.6872, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 21.6872, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 21.6872, s2.loss_bbox: nan, loss: nan
2021-07-29 16:10:38,327 - mmdet - INFO - Epoch [1][80/954]	lr: 1.588e-03, eta: 5:59:03, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 18.5444, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 18.5444, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 18.5444, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][80/954]	lr: 1.588e-03, eta: 5:59:03, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 18.5444, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 18.5444, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 18.5444, s2.loss_bbox: nan, loss: nan
2021-07-29 16:10:58,747 - mmdet - INFO - Epoch [1][100/954]	lr: 1.988e-03, eta: 5:51:34, time: 1.022, data_time: 0.005, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.4198, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.4198, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.4198, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][100/954]	lr: 1.988e-03, eta: 5:51:34, time: 1.022, data_time: 0.005, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.4198, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.4198, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.4198, s2.loss_bbox: nan, loss: nan
2021-07-29 16:11:19,045 - mmdet - INFO - Epoch [1][120/954]	lr: 2.388e-03, eta: 5:46:08, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 20.0973, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 20.0973, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 20.0973, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][120/954]	lr: 2.388e-03, eta: 5:46:08, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 20.0973, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 20.0973, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 20.0973, s2.loss_bbox: nan, loss: nan
2021-07-29 16:11:39,225 - mmdet - INFO - Epoch [1][140/954]	lr: 2.787e-03, eta: 5:41:50, time: 1.008, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 15.7622, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 15.7622, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 15.7622, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][140/954]	lr: 2.787e-03, eta: 5:41:50, time: 1.008, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 15.7622, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 15.7622, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 15.7622, s2.loss_bbox: nan, loss: nan
2021-07-29 16:11:59,520 - mmdet - INFO - Epoch [1][160/954]	lr: 3.187e-03, eta: 5:38:48, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 13.7556, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 13.7556, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 13.7556, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][160/954]	lr: 3.187e-03, eta: 5:38:48, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 13.7556, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 13.7556, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 13.7556, s2.loss_bbox: nan, loss: nan
2021-07-29 16:12:19,808 - mmdet - INFO - Epoch [1][180/954]	lr: 3.586e-03, eta: 5:36:22, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 22.3462, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 22.3462, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 22.3462, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][180/954]	lr: 3.586e-03, eta: 5:36:22, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 22.3462, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 22.3462, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 22.3462, s2.loss_bbox: nan, loss: nan
2021-07-29 16:12:40,297 - mmdet - INFO - Epoch [1][200/954]	lr: 3.986e-03, eta: 5:34:36, time: 1.023, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.7208, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.7208, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.7208, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][200/954]	lr: 3.986e-03, eta: 5:34:36, time: 1.023, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.7208, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.7208, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.7208, s2.loss_bbox: nan, loss: nan
2021-07-29 16:13:00,324 - mmdet - INFO - Epoch [1][220/954]	lr: 4.386e-03, eta: 5:32:29, time: 1.002, data_time: 0.005, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.4703, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.4703, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.4703, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][220/954]	lr: 4.386e-03, eta: 5:32:29, time: 1.002, data_time: 0.005, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.4703, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.4703, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.4703, s2.loss_bbox: nan, loss: nan
2021-07-29 16:13:20,632 - mmdet - INFO - Epoch [1][240/954]	lr: 4.785e-03, eta: 5:31:01, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.0269, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.0269, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.0269, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][240/954]	lr: 4.785e-03, eta: 5:31:01, time: 1.015, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.0269, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.0269, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.0269, s2.loss_bbox: nan, loss: nan
2021-07-29 16:13:41,000 - mmdet - INFO - Epoch [1][260/954]	lr: 5.185e-03, eta: 5:29:50, time: 1.019, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.7658, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.7658, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.7658, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][260/954]	lr: 5.185e-03, eta: 5:29:50, time: 1.019, data_time: 0.004, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.7658, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.7658, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.7658, s2.loss_bbox: nan, loss: nan
2021-07-29 16:14:01,430 - mmdet - INFO - Epoch [1][280/954]	lr: 5.584e-03, eta: 5:28:46, time: 1.019, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 15.0132, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 15.0132, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 15.0132, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][280/954]	lr: 5.584e-03, eta: 5:28:46, time: 1.019, data_time: 0.003, memory: 8264, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 15.0132, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 15.0132, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 15.0132, s2.loss_bbox: nan, loss: nan
2021-07-29 16:14:21,693 - mmdet - INFO - Epoch [1][300/954]	lr: 5.984e-03, eta: 5:27:41, time: 1.014, data_time: 0.005, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 20.0846, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 20.0846, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 20.0846, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][300/954]	lr: 5.984e-03, eta: 5:27:41, time: 1.014, data_time: 0.005, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 20.0846, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 20.0846, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 20.0846, s2.loss_bbox: nan, loss: nan
2021-07-29 16:14:42,466 - mmdet - INFO - Epoch [1][320/954]	lr: 6.384e-03, eta: 5:27:08, time: 1.037, data_time: 0.004, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.1684, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.1684, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.1684, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][320/954]	lr: 6.384e-03, eta: 5:27:08, time: 1.037, data_time: 0.004, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 16.1684, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 16.1684, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 16.1684, s2.loss_bbox: nan, loss: nan
2021-07-29 16:15:02,763 - mmdet - INFO - Epoch [1][340/954]	lr: 6.783e-03, eta: 5:26:16, time: 1.018, data_time: 0.006, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.9009, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.9009, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.9009, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][340/954]	lr: 6.783e-03, eta: 5:26:16, time: 1.018, data_time: 0.006, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.9009, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.9009, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.9009, s2.loss_bbox: nan, loss: nan
2021-07-29 16:15:23,066 - mmdet - INFO - Epoch [1][360/954]	lr: 7.183e-03, eta: 5:25:23, time: 1.014, data_time: 0.003, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.6372, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.6372, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.6372, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][360/954]	lr: 7.183e-03, eta: 5:25:23, time: 1.014, data_time: 0.003, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 17.6372, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 17.6372, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 17.6372, s2.loss_bbox: nan, loss: nan
2021-07-29 16:15:43,759 - mmdet - INFO - Epoch [1][380/954]	lr: 7.582e-03, eta: 5:24:53, time: 1.034, data_time: 0.004, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.3135, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.3135, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.3135, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][380/954]	lr: 7.582e-03, eta: 5:24:53, time: 1.034, data_time: 0.004, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 14.3135, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 14.3135, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 14.3135, s2.loss_bbox: nan, loss: nan
2021-07-29 16:16:04,003 - mmdet - INFO - Epoch [1][400/954]	lr: 7.982e-03, eta: 5:24:06, time: 1.014, data_time: 0.005, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 22.8078, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 22.8078, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 22.8078, s2.loss_bbox: nan, loss: nan
INFO:mmdet:Epoch [1][400/954]	lr: 7.982e-03, eta: 5:24:06, time: 1.014, data_time: 0.005, memory: 8427, loss_rpn_cls: nan, loss_rpn_bbox: nan, s0.loss_cls: nan, s0.acc: 22.8078, s0.loss_bbox: nan, s1.loss_cls: nan, s1.acc: 22.8078, s1.loss_bbox: nan, s2.loss_cls: nan, s2.acc: 22.8078, s2.loss_bbox: nan, loss: nan
Traceback (most recent call last):
  File "/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/supermicro/anaconda3/envs/openmmcv/bin/python', '-u', './tools/train.py', '--local_rank=7', 'configs/underwater/optics.py', '--launcher', 'pytorch', '--no-validate']' died with <Signals.SIGTERM: 15>.
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
Killing subprocess 2671
Killing subprocess 2672
Killing subprocess 2673
Killing subprocess 2674
Killing subprocess 2675
Killing subprocess 2676
Killing subprocess 2677
Killing subprocess 2678
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/site-packages/mmcv/utils/registry.py:64: UserWarning: The old API of register_module(module, force=False) is deprecated and will be removed, please use the new API register_module(name=None, force=False, module=None) instead.
  'The old API of register_module(module, force=False) '
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
/home/supermicro/anaconda3/envs/openmmcv/lib/python3.7/multiprocessing/semaphore_tracker.py:144: UserWarning: semaphore_tracker: There appear to be 14 leaked semaphores to clean up at shutdown
  len(cache))
