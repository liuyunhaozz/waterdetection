{"env_info": "sys.platform: linux\nPython: 3.7.6 (default, Jan  8 2020, 19:59:22) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.1, V10.1.105\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.6.0+cu101\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.9.0+cu101\nOpenCV: 4.5.3\nMMCV: 1.2.4\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMDetection: 2.10.0+28d21cb", "config": "model = dict(\n    type='CascadeRCNN',\n    pretrained=None,\n    backbone=dict(\n        type='DetectoRS_ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        conv_cfg=dict(type='ConvAWS'),\n        sac=dict(type='SAC', use_deform=True),\n        stage_with_sac=(False, True, True, True),\n        output_img=True),\n    neck=dict(\n        type='RFP',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        rfp_steps=2,\n        aspp_out_channels=64,\n        aspp_dilations=(1, 3, 6, 1),\n        rfp_backbone=dict(\n            rfp_inplanes=256,\n            type='DetectoRS_ResNet',\n            depth=101,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            norm_eval=True,\n            conv_cfg=dict(type='ConvAWS'),\n            sac=dict(type='SAC', use_deform=True),\n            stage_with_sac=(False, True, True, True),\n            pretrained=None,\n            style='pytorch')),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32],\n            add_context=True),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=4,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0,\n                    smoothing=0.001),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=4,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0,\n                    smoothing=0.001),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=4,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0,\n                    smoothing=0.001),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1,\n            gpu_assign_thr=5),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=0,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=2000,\n        max_num=2000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=[\n        dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.55,\n                neg_iou_thr=0.55,\n                min_pos_iou=0.55,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False),\n        dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.65,\n                neg_iou_thr=0.65,\n                min_pos_iou=0.65,\n                match_low_quality=False,\n                ignore_iof_thr=-1,\n                gpu_assign_thr=5),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False),\n        dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.75,\n                neg_iou_thr=0.75,\n                min_pos_iou=0.75,\n                match_low_quality=False,\n                ignore_iof_thr=-1,\n                gpu_assign_thr=5),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)\n    ])\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.001,\n        nms=dict(type='soft_nms', iou_threshold=0.5, min_score=0.001),\n        max_per_img=100))\ndataset_type = 'Underwater'\ndata_root = '../data/'\nalbu_train_transforms = [\n    dict(type='RandomRotate90', always_apply=False, p=0.5)\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1200, 352), (1200, 804)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Albu',\n        transforms=[dict(type='RandomRotate90', always_apply=False, p=0.5)],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=[(4096, 600), (4096, 800), (4096, 1000)],\n        flip=True,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\nclasses = ('holothurian', 'echinus', 'scallop', 'starfish')\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='Underwater',\n        ann_file='../data/train/annotations/train.json',\n        img_prefix='../data/train/train-image/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1200, 352), (1200, 804)],\n                multiscale_mode='range',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(type='RandomRotate90', always_apply=False, p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        filter_empty_gt=True),\n    val=dict(\n        type='Underwater',\n        ann_file='../data/annotations/train.json',\n        img_prefix='../data/train/train-image/',\n        classes=('holothurian', 'echinus', 'scallop', 'starfish'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1200, 352), (1200, 804)],\n                multiscale_mode='range',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(type='RandomRotate90', always_apply=False, p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    test=dict(\n        type='Underwater',\n        ann_file='../data/train/annotations/testA.json',\n        img_prefix='../data/test-A-image/',\n        classes=('holothurian', 'echinus', 'scallop', 'starfish'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(4096, 600), (4096, 800), (4096, 1000)],\n                flip=True,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='Adam', lr=0.00024)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.3333333333333333,\n    step=[10, 13])\ntotal_epochs = 15\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/detectors_htc_r101_15e_coco_gc'\nload_from = './pretained/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth'\nresume_from = None\nworkflow = [('train', 1)]\ngpu_ids = range(0, 8)\n", "seed": null, "exp_name": "baseline_dectorRS+resnet101+gc.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 9e-05, "memory": 9619, "data_time": 0.29479, "loss_rpn_cls": 0.53953, "loss_rpn_bbox": 0.0362, "s0.loss_cls": 0.13997, "s0.acc": 96.66748, "s0.loss_bbox": 0.00622, "s1.loss_cls": 0.06074, "s1.acc": 97.28857, "s1.loss_bbox": 0.00371, "s2.loss_cls": 0.03331, "s2.acc": 96.57764, "s2.loss_bbox": 0.00124, "loss": 0.82091, "grad_norm": 7.00695, "time": 1.73289}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 9619, "data_time": 0.00509, "loss_rpn_cls": 0.12045, "loss_rpn_bbox": 0.02882, "s0.loss_cls": 0.04036, "s0.acc": 99.07422, "s0.loss_bbox": 0.00071, "s1.loss_cls": 0.01927, "s1.acc": 99.12695, "s1.loss_bbox": 0.00025, "s2.loss_cls": 0.01042, "s2.acc": 99.06836, "s2.loss_bbox": 5e-05, "loss": 0.22034, "grad_norm": 2.05352, "time": 1.4049}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0001, "memory": 9619, "data_time": 0.00698, "loss_rpn_cls": 0.07316, "loss_rpn_bbox": 0.02221, "s0.loss_cls": 0.01776, "s0.acc": 99.46973, "s0.loss_bbox": 0.0008, "s1.loss_cls": 0.00873, "s1.acc": 99.47217, "s1.loss_bbox": 0.0004, "s2.loss_cls": 0.00509, "s2.acc": 99.35107, "s2.loss_bbox": 9e-05, "loss": 0.12824, "grad_norm": 1.15796, "time": 1.37241}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00011, "memory": 9619, "data_time": 0.00568, "loss_rpn_cls": 0.06801, "loss_rpn_bbox": 0.02142, "s0.loss_cls": 0.0145, "s0.acc": 99.60742, "s0.loss_bbox": 0.00117, "s1.loss_cls": 0.00697, "s1.acc": 99.60938, "s1.loss_bbox": 0.00073, "s2.loss_cls": 0.00391, "s2.acc": 99.53906, "s2.loss_bbox": 0.0002, "loss": 0.11691, "grad_norm": 1.21982, "time": 1.41291}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00012, "memory": 9619, "data_time": 0.00585, "loss_rpn_cls": 0.06467, "loss_rpn_bbox": 0.02178, "s0.loss_cls": 0.01013, "s0.acc": 99.72217, "s0.loss_bbox": 0.00054, "s1.loss_cls": 0.00518, "s1.acc": 99.70312, "s1.loss_bbox": 0.00033, "s2.loss_cls": 0.00295, "s2.acc": 99.65723, "s2.loss_bbox": 0.00012, "loss": 0.10571, "grad_norm": 1.15833, "time": 1.43134}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00013, "memory": 9619, "data_time": 0.00537, "loss_rpn_cls": 0.06141, "loss_rpn_bbox": 0.02095, "s0.loss_cls": 0.0096, "s0.acc": 99.76318, "s0.loss_bbox": 0.0003, "s1.loss_cls": 0.0049, "s1.acc": 99.75195, "s1.loss_bbox": 0.00015, "s2.loss_cls": 0.00273, "s2.acc": 99.71875, "s2.loss_bbox": 5e-05, "loss": 0.1001, "grad_norm": 1.14362, "time": 1.3991}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00014, "memory": 9619, "data_time": 0.00508, "loss_rpn_cls": 0.06215, "loss_rpn_bbox": 0.01865, "s0.loss_cls": 0.00851, "s0.acc": 99.78369, "s0.loss_bbox": 0.00038, "s1.loss_cls": 0.00442, "s1.acc": 99.76514, "s1.loss_bbox": 0.00013, "s2.loss_cls": 0.00234, "s2.acc": 99.75244, "s2.loss_bbox": 5e-05, "loss": 0.09663, "grad_norm": 1.06746, "time": 1.3863}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00014, "memory": 9619, "data_time": 0.00528, "loss_rpn_cls": 0.06052, "loss_rpn_bbox": 0.01878, "s0.loss_cls": 0.01111, "s0.acc": 99.74219, "s0.loss_bbox": 0.00066, "s1.loss_cls": 0.00606, "s1.acc": 99.69678, "s1.loss_bbox": 0.00086, "s2.loss_cls": 0.0031, "s2.acc": 99.66797, "s2.loss_bbox": 0.00044, "loss": 0.10151, "grad_norm": 1.01939, "time": 1.41071}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00015, "memory": 9619, "data_time": 0.00477, "loss_rpn_cls": 0.05849, "loss_rpn_bbox": 0.0178, "s0.loss_cls": 0.00861, "s0.acc": 99.80078, "s0.loss_bbox": 0.00045, "s1.loss_cls": 0.00412, "s1.acc": 99.80371, "s1.loss_bbox": 0.00016, "s2.loss_cls": 0.00219, "s2.acc": 99.7876, "s2.loss_bbox": 3e-05, "loss": 0.09186, "grad_norm": 1.01117, "time": 1.43616}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00016, "memory": 9619, "data_time": 0.00503, "loss_rpn_cls": 0.05848, "loss_rpn_bbox": 0.01978, "s0.loss_cls": 0.01051, "s0.acc": 99.75, "s0.loss_bbox": 0.00062, "s1.loss_cls": 0.0056, "s1.acc": 99.72168, "s1.loss_bbox": 0.00045, "s2.loss_cls": 0.00324, "s2.acc": 99.67676, "s2.loss_bbox": 0.0002, "loss": 0.09888, "grad_norm": 1.04045, "time": 1.41027}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00017, "memory": 9619, "data_time": 0.00558, "loss_rpn_cls": 0.06439, "loss_rpn_bbox": 0.01978, "s0.loss_cls": 0.01003, "s0.acc": 99.74365, "s0.loss_bbox": 0.0009, "s1.loss_cls": 0.00525, "s1.acc": 99.70996, "s1.loss_bbox": 0.00048, "s2.loss_cls": 0.00265, "s2.acc": 99.71191, "s2.loss_bbox": 9e-05, "loss": 0.10357, "grad_norm": 1.00372, "time": 1.41489}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00018, "memory": 9619, "data_time": 0.00676, "loss_rpn_cls": 0.05364, "loss_rpn_bbox": 0.01731, "s0.loss_cls": 0.01018, "s0.acc": 99.76123, "s0.loss_bbox": 0.00075, "s1.loss_cls": 0.00521, "s1.acc": 99.74463, "s1.loss_bbox": 0.00037, "s2.loss_cls": 0.00255, "s2.acc": 99.74512, "s2.loss_bbox": 0.00012, "loss": 0.09012, "grad_norm": 0.88814, "time": 1.41168}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00018, "memory": 9619, "data_time": 0.00535, "loss_rpn_cls": 0.06728, "loss_rpn_bbox": 0.01904, "s0.loss_cls": 0.01078, "s0.acc": 99.7251, "s0.loss_bbox": 0.00129, "s1.loss_cls": 0.00598, "s1.acc": 99.68555, "s1.loss_bbox": 0.00116, "s2.loss_cls": 0.00315, "s2.acc": 99.65527, "s2.loss_bbox": 0.00029, "loss": 0.10896, "grad_norm": 1.00256, "time": 1.41096}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00019, "memory": 9619, "data_time": 0.00683, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 80.26794, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 80.76501, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 80.76013, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.39858}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0002, "memory": 9619, "data_time": 0.00658, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.56236, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.56236, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.56236, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.34657}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00021, "memory": 9619, "data_time": 0.00629, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.79795, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.79795, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.79795, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.36241}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00022, "memory": 9619, "data_time": 0.00619, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 15.83929, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 15.83929, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 15.83929, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.35918}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00022, "memory": 9619, "data_time": 0.00749, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 17.54006, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 17.54006, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 17.54006, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.35231}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00023, "memory": 9619, "data_time": 0.00747, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 15.44079, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 15.44079, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 15.44079, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.35087}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00024, "memory": 9619, "data_time": 0.00791, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 13.82628, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 13.82628, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 13.82628, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.3848}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00024, "memory": 9619, "data_time": 0.26698, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.33094, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.33094, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.33094, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.63669}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00024, "memory": 9619, "data_time": 0.00586, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 13.61088, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 13.61088, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 13.61088, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.34963}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00024, "memory": 9619, "data_time": 0.00587, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.22042, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.22042, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.22042, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.34128}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00024, "memory": 9619, "data_time": 0.00499, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 18.13713, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 18.13713, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 18.13713, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.34719}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00024, "memory": 9668, "data_time": 0.0061, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 15.3016, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 15.3016, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 15.3016, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.35725}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00024, "memory": 9668, "data_time": 0.00568, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 12.54465, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 12.54465, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 12.54465, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.33296}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00024, "memory": 9668, "data_time": 0.00728, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.45349, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.45349, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.45349, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.36375}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00024, "memory": 9668, "data_time": 0.00718, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 16.23866, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 16.23866, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 16.23866, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.36538}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00024, "memory": 9668, "data_time": 0.00556, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "s0.loss_cls": NaN, "s0.acc": 15.38812, "s0.loss_bbox": NaN, "s1.loss_cls": NaN, "s1.acc": 15.38812, "s1.loss_bbox": NaN, "s2.loss_cls": NaN, "s2.acc": 15.38812, "s2.loss_bbox": NaN, "loss": NaN, "grad_norm": NaN, "time": 1.37248}
